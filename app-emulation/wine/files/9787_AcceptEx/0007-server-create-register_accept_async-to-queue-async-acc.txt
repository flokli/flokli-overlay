diff --git a/include/winsock.h b/include/winsock.h
index 2f5e480..25d4bb9 100644
--- a/include/winsock.h
+++ b/include/winsock.h
@@ -840,6 +840,7 @@ typedef struct WS(WSAData)
 
 /* internal per-socket flags */
 #ifdef __WINESRC__
+#define FD_WINE_ACCEPTING          0x08000000
 #define FD_WINE_LISTENING          0x10000000
 #define FD_WINE_NONBLOCKING        0x20000000
 #define FD_WINE_CONNECTED          0x40000000
diff --git a/server/protocol.def b/server/protocol.def
index 146247a..480ba93 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -1089,6 +1089,13 @@ enum server_fd_type
 @END
 
 
+/* Register an accept listener */
+@REQ(register_accept_async)
+    async_data_t data;          /* async I/O parameters for listener */
+    obj_handle_t ahandle;       /* handle to the future accepting socket */
+@END
+
+
 /* Set socket event parameters */
 @REQ(set_socket_event)
     obj_handle_t  handle;        /* handle to the socket */
diff --git a/server/sock.c b/server/sock.c
index 909fe2d..84eacc9 100644
--- a/server/sock.c
+++ b/server/sock.c
@@ -80,6 +80,7 @@
 #define FD_CLOSE                   0x00000020
 
 /* internal per-socket flags */
+#define FD_WINE_ACCEPTING          0x08000000
 #define FD_WINE_LISTENING          0x10000000
 #define FD_WINE_NONBLOCKING        0x20000000
 #define FD_WINE_CONNECTED          0x40000000
@@ -107,6 +108,9 @@ struct sock
     obj_handle_t        wparam;      /* message wparam (socket handle) */
     int                 errors[FD_MAX_EVENTS]; /* event errors */
     struct sock        *deferred;    /* socket that waits for a deferred accept */
+    struct async       *async;       /* pending accept to this socket */
+    struct list         accentry;    /* entry in the list below for the request */
+    struct list         paccepts;    /* pending accepts on this socket */
     struct async_queue *read_q;      /* queue for asynchronous reads */
     struct async_queue *write_q;     /* queue for asynchronous writes */
 };
@@ -122,11 +126,13 @@ static enum server_fd_type sock_get_fd_type( struct fd *fd );
 static int sock_removable( struct fd *fd );
 static void sock_queue_async( struct fd *fd, const async_data_t *data, int type, int count );
 static void sock_async_event( struct fd *fd, struct async_queue *queue, struct async *async, int status, int finished );
+static int sock_async_terminated( struct fd *fd, struct async_queue *queue, struct async *async, int status );
 static void sock_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb );
 
 static int sock_get_ntstatus( int err );
 static int sock_get_error( int err );
 static void sock_set_error(void);
+static int accept_into_socket( struct sock *sock, struct sock *acceptsock );
 
 static const struct object_ops sock_ops =
 {
@@ -158,7 +164,7 @@ static const struct fd_ops sock_fd_ops =
     default_fd_ioctl,             /* ioctl */
     sock_queue_async,             /* queue_async */
     sock_async_event,             /* async_event */
-    default_fd_async_terminated,  /* async_terminated */
+    sock_async_terminated,        /* async_terminated */
     sock_cancel_async             /* cancel_async */
 };
 
@@ -248,7 +254,7 @@ static int sock_reselect( struct sock *sock )
     if (!sock->polling)  /* FIXME: should find a better way to do this */
     {
         /* previously unconnected socket, is this reselect supposed to connect it? */
-        if (!(sock->state & ~FD_WINE_NONBLOCKING)) return 0;
+        if (!(sock->state & ~(FD_WINE_NONBLOCKING|FD_WINE_ACCEPTING))) return 0;
         /* ok, it is, attach it to the wineserver's main poll loop */
         sock->polling = 1;
     }
@@ -315,6 +321,13 @@ static void sock_dispatch_asyncs( struct sock *sock, int event )
     }
 }
 
+static inline void sock_free_accept_async( struct sock *acceptsock )
+{
+    list_remove( &acceptsock->accentry );
+    acceptsock->state &= ~FD_WINE_ACCEPTING;
+    acceptsock->async = NULL;
+}
+
 static void sock_poll_event( struct fd *fd, int event )
 {
     struct sock *sock = get_fd_user( fd );
@@ -485,7 +498,7 @@ static int sock_get_poll_events( struct fd *fd )
         return POLLOUT;
     if (sock->state & FD_WINE_LISTENING)
         /* listening, wait for readable */
-        return (mask & FD_ACCEPT) ? POLLIN : 0;
+	return (!(sock->hmask & FD_ACCEPT) || async_waiting( sock->read_q )) ? POLLIN : 0;
 
     if ( async_queued( sock->read_q ) )
     {
@@ -563,9 +576,57 @@ static void sock_queue_async( struct fd *fd, const async_data_t *data, int type,
 static void sock_async_event( struct fd *fd, struct async_queue *queue, struct async *async, int status, int finished )
 {
     struct sock *sock = get_fd_user( fd );
+    struct sock *acceptsock, *next;
+    assert( sock->obj.ops == &sock_ops );
+
+    if ( finished )
+    {
+        /* Clear pending accepts */
+        LIST_FOR_EACH_ENTRY_SAFE( acceptsock, next, &sock->paccepts, struct sock, accentry )
+        {
+            if ( acceptsock->async == async )
+            {
+                sock_free_accept_async( acceptsock );
+                break;
+            }
+        }
+    }
+
     sock_reselect( sock );
 }
 
+static int sock_async_terminated( struct fd *fd, struct async_queue *queue, struct async *async, int status)
+{
+    struct sock *sock = get_fd_user( fd );
+    struct sock *acceptsock;
+    assert( sock->obj.ops == &sock_ops );
+
+    if (status == STATUS_ALERTED)
+    {
+        LIST_FOR_EACH_ENTRY( acceptsock, &sock->paccepts, struct sock, accentry )
+        {
+            if ( acceptsock->async == async )
+            {
+                status = accept_into_socket( sock, acceptsock );
+
+                if (status != WSAEWOULDBLOCK)
+                    sock_free_accept_async( acceptsock );
+
+                if (status == STATUS_SUCCESS)
+                {
+                    sock_reselect( acceptsock );
+                    status = STATUS_ALERTED;
+                }
+                else if (status == WSAEWOULDBLOCK)
+                    status = STATUS_PENDING;
+                break;
+            }
+        }
+    }
+
+    return status;
+}
+
 static void sock_cancel_async( struct fd *fd, struct process *process, struct thread *thread, client_ptr_t iosb )
 {
     struct sock *sock = get_fd_user( fd );
@@ -587,12 +648,23 @@ static struct fd *sock_get_fd( struct object *obj )
 static void sock_destroy( struct object *obj )
 {
     struct sock *sock = (struct sock *)obj;
+    struct sock *acceptsock, *next;
     assert( obj->ops == &sock_ops );
 
     /* FIXME: special socket shutdown stuff? */
 
     if ( sock->deferred )
         release_object( sock->deferred );
+    if ( sock->async )
+    {
+        async_terminate( sock->async, STATUS_CANCELLED );
+        sock_free_accept_async( sock );
+    }
+    LIST_FOR_EACH_ENTRY_SAFE( acceptsock, next, &sock->paccepts, struct sock, accentry )
+    {
+        /* No need to cancel, freeing queues does it */
+        sock_free_accept_async( acceptsock );
+    }
 
     free_async_queue( sock->read_q );
     free_async_queue( sock->write_q );
@@ -624,6 +696,8 @@ static struct sock *alloc_sock(void)
     sock->message = 0;
     sock->wparam  = 0;
     sock->deferred = NULL;
+    sock->async  = NULL;
+    list_init( &sock->paccepts );
     sock->read_q  = NULL;
     sock->write_q = NULL;
 
@@ -666,12 +740,84 @@ static struct object *create_socket( int family, int type, int protocol, unsigne
     return &sock->obj;
 }
 
+/* accepts a socket and inits it */
+static int accept_new_fd( struct sock *sock )
+{
+
+    /* Try to accept(2). We can't be safe that this an already connected socket
+     * or that accept() is allowed on it. In those cases we will get -1/errno
+     * return.
+     */
+    int acceptfd;
+    struct sockaddr saddr;
+    unsigned int slen = sizeof(saddr);
+    acceptfd = accept( get_unix_fd(sock->fd), &saddr, &slen);
+    if (acceptfd == -1)
+        return acceptfd;
+
+    fcntl(acceptfd, F_SETFL, O_NONBLOCK); /* make socket nonblocking */
+    return acceptfd;
+}
+
+static int accept_into_socket( struct sock *sock, struct sock *acceptsock )
+{
+    int acceptfd;
+    struct fd *oldfd;
+    if ( sock->deferred )
+    {
+        acceptfd = dup( get_unix_fd(sock->deferred->fd) );
+        if ( acceptfd == -1 )
+            return sock_get_error(errno);
+
+        /* Make sure we destroy fd first, so shutdown() isn't called */
+        oldfd = sock->deferred->fd;
+        sock->deferred->fd = NULL;
+        release_object( sock->deferred );
+        sock->deferred = NULL;
+        release_object( oldfd );
+    }
+    else
+    {
+        if ((acceptfd = accept_new_fd( sock )) == -1)
+            return sock_get_error(errno);
+    }
+
+    /* FIXME: need to copy sockopts from the old fd */
+    if ( dup2( acceptfd, get_unix_fd(acceptsock->fd) ) == -1 )
+    {
+        close(acceptfd);
+        return sock_get_error(errno);
+    }
+    close(acceptfd);
+
+    /* FIXME: Move these into SO_UPDATE_ACCEPT_CONTEXT + validation */
+    acceptsock->state  |= FD_WINE_CONNECTED|FD_READ|FD_WRITE;
+    acceptsock->mask    = sock->mask;
+    acceptsock->hmask   = 0;
+    acceptsock->pmask   = 0;
+    acceptsock->polling = 0;
+    acceptsock->type    = sock->type;
+    acceptsock->family  = sock->family;
+    acceptsock->window  = sock->window;
+    acceptsock->message = sock->message;
+    acceptsock->wparam  = 0;
+    if (acceptsock->event) release_object(acceptsock->event);
+    acceptsock->event   = NULL;
+    if (sock->event) acceptsock->event = (struct event *)grab_object( sock->event );
+    acceptsock->deferred = NULL;
+
+    sock->pmask &= ~FD_ACCEPT;
+    sock->hmask &= ~FD_ACCEPT;
+    sock_reselect( sock );
+
+    return STATUS_SUCCESS;
+}
+
 /* accept a socket (creates a new fd) */
 static struct sock *accept_socket( struct sock *sock )
 {
     struct sock *acceptsock;
     int	acceptfd;
-    struct sockaddr	saddr;
 
     if ( sock->deferred )
     {
@@ -680,18 +826,12 @@ static struct sock *accept_socket( struct sock *sock )
     }
     else
     {
-
-        /* Try to accept(2). We can't be safe that this an already connected socket
-         * or that accept() is allowed on it. In those cases we will get -1/errno
-         * return.
-         */
-        unsigned int slen = sizeof(saddr);
-        acceptfd = accept( get_unix_fd(sock->fd), &saddr, &slen);
-        if (acceptfd==-1)
+        if ((acceptfd = accept_new_fd( sock )) == -1)
         {
             sock_set_error();
             return NULL;
         }
+
         if (!(acceptsock = alloc_sock()))
         {
             close( acceptfd );
@@ -699,7 +839,6 @@ static struct sock *accept_socket( struct sock *sock )
         }
 
         /* newly created socket gets the same properties of the listening socket */
-        fcntl(acceptfd, F_SETFL, O_NONBLOCK); /* make socket nonblocking */
         acceptsock->state  = FD_WINE_CONNECTED|FD_READ|FD_WRITE;
         if (sock->state & FD_WINE_NONBLOCKING)
             acceptsock->state |= FD_WINE_NONBLOCKING;
@@ -993,3 +1132,59 @@ DECL_HANDLER(set_socket_deferred)
     sock->deferred = acceptsock;
     release_object( sock );
 }
+
+DECL_HANDLER(register_accept_async)
+{
+    struct sock *sock, *acceptsock;
+
+    sock = (struct sock *)get_handle_obj( current->process, req->data.handle,
+                                          FILE_READ_ATTRIBUTES, &sock_ops );
+    if ( !sock )
+    {
+        set_error( STATUS_OBJECT_TYPE_MISMATCH );
+        return;
+    }
+    if ( !(sock->state & FD_WINE_LISTENING) )
+    {
+        release_object( sock );
+       set_error( STATUS_OBJECT_TYPE_MISMATCH );
+        return;
+    }
+
+    acceptsock = (struct sock *)get_handle_obj( current->process, req->ahandle,
+                                                FILE_WRITE_ATTRIBUTES, &sock_ops );
+    if ( !acceptsock )
+    {
+        release_object( sock );
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
+    if ( acceptsock->state & ~FD_WINE_NONBLOCKING )
+    {
+        release_object( acceptsock );
+        release_object( sock );
+        set_error( STATUS_INVALID_PARAMETER );
+        return;
+    }
+
+    if (!sock->read_q && !(sock->read_q = create_async_queue( sock->fd ))) return;
+
+    acceptsock->async = create_async( current, sock->read_q, &req->data );
+    if ( !acceptsock->async )
+    {
+        release_object( acceptsock );
+        release_object( sock );
+        return;
+    }
+
+    list_add_tail( &sock->paccepts, &acceptsock->accentry );
+    acceptsock->state |= FD_WINE_ACCEPTING;
+    release_object( acceptsock->async );
+
+    sock_reselect( sock );
+
+    set_error( STATUS_PENDING );
+
+    release_object( acceptsock );
+    release_object( sock );
+}
